---
openapi: 3.0.0
info:
  title: HQ API Specification
  version: API_VERSION
externalDocs:
  description: OpenAPI Specification
  url: https://swagger.io/specification/
servers:
  - url: https://hq.api.floctory.ru/
tags:
  - name: country
    description: Operations about country
  - name: bad-email
    description: Operation with bad emails
  - name: account
    description: Operation with account
paths:
  /country:
    get:
      tags:
        - country
      summary: Get all countries
      description: Returns all Countries
      operationId: getCountries
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Country"
        500:
          $ref: "#/components/responses/500UnknownException"
    post:
      tags:
        - country
      summary: Create country
      operationId: createCountry
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
        400:
          $ref: "#/components/responses/400CountryDataValidationError"
        500:
          $ref: "#/components/responses/500UnknownException"
      requestBody:
        $ref: "#/components/requestBodies/CountryDataRequest"
  /country/{id}:
    get:
      tags:
        - country
      summary: Find Country by ID
      description: Returns a single Country
      operationId: getCountryById
      parameters:
        - name: id
          in: path
          description: ID of country to return
          required: true
          schema:
            $ref: "#/components/schemas/CountryId"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
        404:
          description: Country not found
        500:
          $ref: "#/components/responses/500UnknownException"
    put:
      tags:
        - country
      summary: Updates data for country
      operationId: updateCountry
      parameters:
        - name: id
          in: path
          description: ID of country that needs to be updated
          required: true
          schema:
            $ref: "#/components/schemas/CountryId"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
        400:
          $ref: "#/components/responses/400CountryDataValidationError"
        404:
          description: Country not found
        500:
          $ref: "#/components/responses/500UnknownException"
      requestBody:
        $ref: "#/components/requestBodies/CountryDataRequest"
  /country/{id}/settings:
    put:
      tags:
        - country
      summary: Updates settings for country
      operationId: updateCountrySettings
      parameters:
        - name: id
          in: path
          description: ID of country that needs to be updated
          required: true
          schema:
            $ref: "#/components/schemas/CountryId"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
        404:
          description: Country not found
        500:
          $ref: "#/components/responses/500UnknownException"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CountrySettings"
  /bad-email:
    get:
      tags:
        - bad-email
      summary: Get all bad emails
      description: Returns all bad emails patterns
      operationId: getBadEmails
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BadEmail"
        500:
          $ref: "#/components/responses/500UnknownException"
    post:
      tags:
        - bad-email
      summary: Add bad email
      operationId: addBadEmail
      description: Creates new pattern for bad email
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadEmail"
        500:
          $ref: "#/components/responses/500UnknownException"
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: "Regular expression of bad email"
              example: ".*@gmali.com"
              minLength: 4
  /bad-email/{id}:
    delete:
      tags:
        - bad-email
      summary: Delete Bad Email
      description: Delete Bad Email by specified ID
      operationId: deleteBadEmail
      parameters:
        - name: id
          in: path
          description: ID of Bad Email to delete
          required: true
          schema:
            $ref: "#/components/schemas/BadEmailId"
      responses:
        200:
          description: successful operation
        404:
          description: Bad email with supplied ID not found
        500:
          $ref: "#/components/responses/500UnknownException"
  /account:
    get:
      tags:
        - account
      summary: Get accounts
      description: Returns subset of accounts
      operationId: getAccounts
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: The number of Accounts to skip before starting to collect the result set.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          required: false
          description: The number of Accounts to return.
        - in: query
          name: byId
          schema:
            type: array
            description: "Filter for account to show accounts with passed AccountId only"
            items:
              $ref: "#/components/schemas/AccountId"
          required: false
          description: "Add to request filtration of result subset by Account Id."
        - in: query
          name: byRoles
          schema:
            type: array
            description: "Filter for account to show accounts with passed Role only"
            items:
              $ref: "#/components/schemas/Role"
          required: false
          description: "Add to request filtration of result subset by Role."
        - in: query
          name: search
          schema:
            type: string
            description: "Search in Account parameters passed search string"
          required: false
          description: "Add to request filtration of result subset by search string"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        500:
          $ref: "#/components/responses/500UnknownException"
    post:
      tags:
        - account
      summary: Create Account
      operationId: createAccount
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/400AccountCreationValidationError"
        500:
          $ref: "#/components/responses/500UnknownException"
      requestBody:
        $ref: "#/components/requestBodies/AccountCreateRequest"
  /account/{id}:
    get:
      tags:
        - account
      summary: Find Account by ID
      description: Returns a single Account
      operationId: getAccountById
      parameters:
        - name: id
          in: path
          description: ID of account to return
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        404:
          description: Account not found
        500:
          $ref: "#/components/responses/500UnknownException"
    put:
      tags:
        - account
      summary: Updates data for Account
      operationId: updateAccount
      parameters:
        - name: id
          in: path
          description: ID of Account that needs to be updated
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/400AccountDataValidationError"
        404:
          description: Account not found
        500:
          $ref: "#/components/responses/500UnknownException"
      requestBody:
        $ref: "#/components/requestBodies/AccountDataRequest"
  /account/{id}/switch:
    put:
      tags:
        - account
      summary: Disable or enable Account
      operationId: switchAccountStatus
      parameters:
        - name: id
          in: path
          description: ID of Account that needs to enable or disable
          required: true
          schema:
            $ref: "#/components/schemas/AccountId"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        404:
          description: Account not found
        500:
          $ref: "#/components/responses/500UnknownException"
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
              description: >
                Enable or disable account.
                True - represents enable Account.
                False - represents disable Account.
components:
  schemas:
    CountryId:
      type: integer
      format: int32
      description: "Unique identifier of country created in our system"
    Country:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/CountryId"
        name:
          description: >
            Official country name in English. List of country names from
            <a href="https://www.iban.com/country-codes">ISO 3166</a>
          type: string
          example: "United States of America (the)"
        data:
          $ref: "#/components/schemas/CountryData"
        settings:
          $ref: "#/components/schemas/CountrySettings"
    CountryData:
      type: object
      required:
        - code
        - alternativeName
        - locale
        - currency
        - timezone
      description: >
        Updatable part of <a href="#/components/schemas/Country">country</a>.
        Also used for country creation.
      properties:
        code:
          $ref: "#/components/schemas/CountryCode"
        alternativeName:
          description: "Additional country name for internal usage"
          type: string
          example: "United States of America"
          minLength: 2
          maxLength: 25
        locale:
          $ref: "#/components/schemas/Locale"
        currency:
          $ref: "#/components/schemas/Currency"
        timezone:
          $ref: "#/components/schemas/Timezone"
    CountrySettings:
      type: object
      properties:
        extendTermsPeriod:
          type: integer
          format: int32
          description: >
            Accounting settings for the Country.
            Extend terms period.
          minimum: 0
          maximum: 30
        issueDaysShift:
          type: integer
          format: int32
          description: >
            Accounting settings for the Country.
            Issue days shift.
          minimum: 0
          maximum: 30
        defaultDueDaysShift:
          type: integer
          format: int32
          description: >
            Accounting settings for the Country.
            Default due days shift.
          minimum: 0
          maximum: 30
        invoiceEndDateOffset:
          type: integer
          format: int32
          description: >
            Accounting settings for the Country.
            Invoice end date offset.
          minimum: 0
          maximum: 30
        accountantEmails:
          type: array
          description: >
            Accounting settings for the Country.
            Accountant emails.
          items:
            $ref: "#/components/schemas/Email"
        shouldSendPaid:
          type: boolean
          description: >
            Accounting settings for the Country.
            Should send paid.
        shouldNotifyAccountants:
          description: >
            Accounting settings for the Country.
            Should notify accountants.
          type: boolean
        priceFormatCurrency:
          description: >
            Price formatting settings for country.
            Format for price, use %n - represent numeric value and
            %u - represent currency and add other format symbols.
          example: "%n %u"
          pattern: ^\%n.*\%u$
          type: string
        priceFormatPercent:
          description: >
            Price formatting settings for country.
            Format for discounts, use %n - represent numeric value and
            %u - represent percent sign and add other format symbols.
          example: "%n%u"
          pattern: ^\%n.*\%u$
          type: string
        invoiceFormatCurrency:
          description: >
            Price formatting settings for country.
            Format for prices in invoices, use %n - represent numeric value and
            %u - represent currency and add other format symbols.
          example: "%n"
          pattern: ^(\%n.*\%u)|(\%n)$
          type: string
        invoiceFormatPercent:
          description: >
            Price formatting settings for country.
            Format for percent in invoices, use %n - represent numeric value and
            %u - represent percent sign and add other format symbols.
          example: "%n%u"
          pattern: ^\%n.*\%u$
          type: string
        invoiceCurrencyPrecision:
          type: integer
          format: int32
          description: >
            Price formatting settings for country.
            Float precision in invoices for currency
          minimum: 0
          maximum: 4
        invoicePercentPrecision:
          type: integer
          format: int32
          description: >
            Price formatting settings for country.
            Float precision in invoices for percent
          minimum: 0
          maximum: 4
    BadEmailId:
      type: integer
      format: int32
      description: "Unique identifier of Bad Email"
    BadEmail:
      type: object
      description: "Regexp pattern for determining bad emails"
      properties:
        id:
          $ref: "#/components/schemas/BadEmailId"
        regexp:
          description: >
            Regular expression to identify bad email
          example: ".*@gmali.com"
          type: string
        createdAt:
          $ref: "#/components/schemas/Timestamp"
    AccountId:
      type: integer
      format: int32
      description: "Unique identifier of account"
    Account:
      type: object
      description: >
        Main entity for authentication and authorization in our systems.
        Represents clients accounts and employees accounts.
      properties:
        id:
          $ref: "#/components/schemas/AccountId"
        email:
          $ref: "#/components/schemas/Email"
        data:
          $ref: "#/components/schemas/AccountData"
        isActive:
          description: "Represents status of account, true is active, false is disabled"
          type: boolean
        registrationDate:
          $ref: "#/components/schemas/Timestamp"
    AccountData:
      type: object
      description: >
        Updatable data of Account
      required:
        - firstName
        - countryId
        - isHasSubscription
        - role
      properties:
        firstName:
          type: string
          description: "Account User First Name, used for employees accounts"
          example: "John"
        lastName:
          type: string
          description: "Account User Last Name, used for employees accounts"
          example: "Galt"
        countryId:
          $ref: "#/components/schemas/CountryId"
        isHasSubscription:
          description: "Represents email subscription status, true is subscribed, false is unsubscribed"
          type: boolean
        role:
          $ref: "#/components/schemas/Role"
        accountManager:
          $ref: "#/components/schemas/AccountId"
        accountTeamLead:
          $ref: "#/components/schemas/AccountId"
        juniorManager:
          $ref: "#/components/schemas/AccountId"
        salesManager:
          $ref: "#/components/schemas/AccountId"
        salesTeamLead:
          $ref: "#/components/schemas/AccountId"
        adtechAccountManager:
          $ref: "#/components/schemas/AccountId"
        adtechAccountTeamLead:
          $ref: "#/components/schemas/AccountId"
        adtechSalesManager:
          $ref: "#/components/schemas/AccountId"
        adtechSalesTeamLead:
          $ref: "#/components/schemas/AccountId"
    AccountCreateData:
      type: object
      description: >
        Data for creation of new Account
      properties:
        email:
          $ref: "#/components/schemas/Email"
        firstName:
          type: string
          description: "Account User First Name, used for employees accounts"
          example: "John"
        lastName:
          type: string
          description: "Account User Last Name, used for employees accounts"
          example: "Galt"
        countryId:
          $ref: "#/components/schemas/CountryId"
    Role:
      type: string
      description: "Variants of Account roles"
      enum:
        - USER
        - SALES
        - ACCOUNT_MANAGER
        - BILLING
        - DEVELOPER
        - ACCOUNT_MANAGER_SPDE
        - USER_VIEW_ONLY
        - FLOCKER
        - ADMIN
        - WC_JUNIOR
    Currency:
      type: string
      description: >
        Official currency of the country.
        As value Use 3 letter code in UPPER CASE from <a href="https://en.wikipedia.org/wiki/ISO_4217">ISO 4217</a>
      pattern: ^[A-Z]{3}$
      example: "USD"
    Locale:
      type: string
      description: >
        Locale is a set of parameters that defines the user's language,
        region and any special variant preferences that the user wants to see in their user interface.
        For value use 2 letter code from <a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO 639-1</a>
      pattern: ^[a-z]{2}$
      example: "en"
    Timezone:
      type: string
      description: >
        <a href="https://en.wikipedia.org/wiki/Time_zone">Time zone</a> is an area that observes a uniform standard
        time for legal, commercial and social purposes.
        For this object use value from column "TZ database name"
        from <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">database of time zones</a>
        with type canonical
      example: "America/Los_Angeles"
    CountryCode:
      type: string
      description: >
        Codes for the representation
        of names of countries and their subdivisions. This property uses
        <a href="https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes">ISO 3166-1</a> alpha-2
        codes (two-letter country codes)
      pattern: ^[A-Z]{2}$
      example: "US"
    Email:
      type: string
      format: email
      description: Email address. Pattern is the regex uses all the characters permitted by RFC 5322
      example: "john.galt@flocktory.com"
    Timestamp:
      type: integer
      format: int64
      example: 1650815002
      description: >
        <a href="https://en.wikipedia.org/wiki/Unix_time">Unix time</a> is a system for describing a point in time.
        It is the number of seconds that have elapsed since the Unix epoch.
    CountryDataValidationError:
      type: object
      properties:
        message:
          type: string
          example: "Some Validation error for CountryData"
        error:
          type: string
          enum:
            - INVALID_COUNTRY_CODE
            - INVALID_LOCALE
            - INVALID_CURRENCY
            - INVALID_TIMEZONE
    AccountCreationValidationError:
      type: object
      properties:
        message:
          type: string
          example: "Some Validation error for AccountData"
        error:
          type: string
          enum:
            - INVALID_COUNTRY_ID
    AccountDataValidationError:
      type: object
      properties:
        message:
          type: string
          example: "Some Validation error for AccountData"
        error:
          type: string
          enum:
            - INVALID_COUNTRY_ID
            - INVALID_ROLE
            - INVALID_SUBSCRIPTION_STATUS
            - INVALID_ACCOUNT_MANAGER
            - INVALID_ACCOUNT_TEAM_LEAD
            - INVALID_JUNIOR_MANAGER
            - INVALID_SALES_MANAGER
            - INVALID_SALES_TEAM_LEAD
            - INVALID_ADTECH_ACCOUNT_MANAGER
            - INVALID_ADTECH_ACCOUNT_TEAM_LEAD
            - INVALID_ADTECH_SALES_MANAGER
            - INVALID_ADTECH_SALES_TEAM_LEAD
    InternalServerError:
      type: object
      description: Entity to store some unknown internal server error
      properties:
        requestId:
          description: Unique request identifier
          type: string
          example: "6341c870-c23a-11ec-a6d6-0800200c9a66"
        message:
          description: Description of the exception
          type: string
          example: "Internal Server Exception"
  requestBodies:
    CountryDataRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CountryData"
      description: CountryData for creation and update of Country
      required: true
    AccountDataRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AccountData"
      description: Data for creation and update of Account
      required: true
    AccountCreateRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AccountCreateData"
      description: Request data for creation of new account
      required: true
  responses:
    400CountryDataValidationError:
      description: Invalid CountryData supplied
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CountryDataValidationError"
    400AccountCreationValidationError:
      description: Invalid AccountCreateData supplied
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AccountCreationValidationError"
    400AccountDataValidationError:
      description: Invalid AccountData supplied
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AccountDataValidationError"
    500UnknownException:
      description: Unknown server side exception
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InternalServerError"

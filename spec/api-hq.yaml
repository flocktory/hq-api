---
openapi: 3.0.0
info:
  title: HQ API Spesification
  version: API_VERSION
externalDocs:
  description: OpenAPI Specification
  url: https://swagger.io/specification/
servers:
  - url: https://hq.api.floctory.ru/
tags:
  - name: country
    description: Operations about country
  - name: bad-email
    description: Operation with bad emails
paths:
  /country:
    get:
      tags:
        - country
      summary: Get all contries
      description: Returns all Countries
      operationId: getCountries
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/Country"
        500:
          $ref: "#/components/responses/500UnknownException"
    post:
      tags:
        - country
      summary: Create country
      operationId: createCountry
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
        400:
          $ref: "#/components/responses/400CountryDataValidationError"
        500:
          $ref: "#/components/responses/500UnknownException"
      requestBody:
        $ref: "#/components/requestBodies/CountryDataRequest"
  /country/{id}:
    get:
      tags:
        - country
      summary: Find Country by ID
      description: Returns a single Country
      operationId: getCountryById
      parameters:
        - name: id
          in: path
          description: ID of country to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
        400:
          description: Invalid Country ID supplied
        404:
          description: Country not found
        500:
          $ref: "#/components/responses/500UnknownException"
    put:
      tags:
        - country
      summary: Updates data for country
      operationId: updateCountry
      parameters:
        - name: id
          in: path
          description: ID of country that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
        400:
          $ref: "#/components/responses/400CountryDataValidationError"
        404:
          description: Country not found
        500:
          $ref: "#/components/responses/500UnknownException"
      requestBody:
        $ref: "#/components/requestBodies/CountryDataRequest"
  /country/{id}/settings:
    put:
      tags:
        - country
      summary: Updates settings for country
      operationId: updateCountrySettings
      parameters:
        - name: id
          in: path
          description: ID of country that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
        404:
          description: Country not found
        500:
          $ref: "#/components/responses/500UnknownException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                accountingSettings:
                  $ref: "#/components/schemas/AccountingSettings"
                priceFormatting:
                  $ref: "#/components/schemas/PriceFormatting"
  /bad-email:
    get:
      tags:
        - bad-email
      summary: Get all bad emails
      description: Returns all bad emails patterns
      operationId: getBadEmails
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/BadEmail"
        500:
          $ref: "#/components/responses/500UnknownException"
    post:
      tags:
        - bad-email
      summary: Add bad email
      operationId: addBadEmail
      description: Creates new pattern for bad email
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadEmail"
        500:
          $ref: "#/components/responses/500UnknownException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - regexp
              properties:
                regexp:
                  type: string
                  description: "Regular expression of bad email"
                  example: ".*@gmali.com"
  /bad-email/{id}:
    delete:
      tags:
        - bad-email
      summary: Delete Bad Email
      description: Delete Bad Email by specified ID
      operationId: deleteBadEmail
      parameters:
        - name: id
          in: path
          description: ID of Bad Email to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
        404:
          description: Bad email with supplied ID not found
        500:
          $ref: "#/components/responses/500UnknownException"
components:
  schemas:
    CountryId:
      type: integer
      format: int64
      description: "Unique identifier of country created in our system"
    Country:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/CountryId"
        name:
          description: >
            Official country name in English. Use list of country names from
            <a href="https://www.iban.com/country-codes">ISO 3166</a>
          type: string
          example: "United States of America (the)"
        alternativeName:
          description: "Additional country name for internal usage"
          type: string
          example: "United States of America"
        locale:
          $ref: "#/components/schemas/Locale"
        currency:
          $ref: "#/components/schemas/Currency"
        timezone:
          $ref: "#/components/schemas/Timezone"
        accountingSettings:
          $ref: "#/components/schemas/AccountingSettings"
        priceFormatting:
          $ref: "#/components/schemas/PriceFormatting"
        countryÐ¡ode:
          $ref: "#/components/schemas/CountryCode"
    CountryData:
      type: object
      required:
        - name
        - alternativeName
        - locale
        - currency
        - timezone
      description: >
        Updatable part of <a href="#/components/schemas/Country">country</a>.
        Also used for country creation.
      properties:
        name:
          description: >
            Official country name in English. Use list of country names from
            <a href="https://www.iban.com/country-codes">ISO 3166</a>
          type: string
          example: "United States of America (the)"
          minLength: 4
          maxLength: 25
        alternativeName:
          description: "Additional country name for internal usage"
          type: string
          example: "United States of America"
          minLength: 2
          maxLength: 25
        locale:
          $ref: "#/components/schemas/Locale"
        currency:
          $ref: "#/components/schemas/Currency"
        timezone:
          $ref: "#/components/schemas/Timezone"
    AccountingSettings:
      type: object
      properties:
        extendTermsPeriod:
          type: integer
          minimum: 0
          maximum: 30
        issueDaysShift:
          type: integer
          minimum: 0
          maximum: 30
        defaultDueDaysShift:
          type: integer
          minimum: 0
          maximum: 30
        invoiceEndDateOffset:
          type: integer
          minimum: 0
          maximum: 30
        accountantEmails:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Email"
        shouldSendPaid:
          type: boolean
        shouldNotifyAccountants:
          type: boolean
    PriceFormatting:
      type: object
      description: "Object for storage price formatting settings for country"
      properties:
        priceFormatCurrency:
          description: >
            Format for price, use %n - represent numeric value and
            %u - represent currency and add other format symbols.
          example: "%n %u"
          format: ^\%n.*\%u$
          type: string
        priceFormatPercent:
          description: >
            Format for discounts, use %n - represent numeric value and
            %u - represent percent sign and add other format symbols.
          example: "%n%u"
          format: ^\%n.*\%u$
          type: string
        invoiceFormatCurrency:
          description: >
            Format for prices in invoices, use %n - represent numeric value and
            %u - represent currency and add other format symbols.
          example: "%n"
          format: ^(\%n.*\%u)|(\%n)$
          type: string
        invoiceFormatPercent:
          description: >
            Format for percent in invoices, use %n - represent numeric value and
            %u - represent percent sign and add other format symbols.
          example: "%n%u"
          format: ^\%n.*\%u$
          type: string
        invoiceCurrencyPrecision:
          type: integer
          description:  Float precision in invoices for currency
          minimum: 0
          maximum: 4
        invoicePercentPrecision:
          type: integer
          description: Float precision in invoices for percent
          minimum: 0
          maximum: 4
    BadEmail:
      type: object
      description: "Regexp pattern for determining bad emails"
      properties:
        id:
          type: integer
        regexp:
          description: >
            Regular expression to identify bad email
          example: ".*@gmali.com"
          type: string
        createdAt:
          $ref: "#/components/schemas/Timestamp"
    AccountId:
      type: integer
      format: int64
      description: "Unique identifier of account"
    Account:
      type: object
      description: >
        Main entity for authentication and authorization in our systems.
        Represents clients accounts and employees accounts.
      properties:
        id:
          $ref: "#/components/schemas/AccountId"
        email:
          $ref: "#/components/schemas/Email"
        firstName:
          type: string
          description: "Account User First Name, used for employees accounts"
          example: "John"
        lastName:
          type: string
          description: "Account User Last Name, used for employees accounts"
          example: "Galt"
        countryId:
          $ref: "#/components/schemas/CountryId"
        isActive:
          description: "Represents status of account, true is active, false is disabled"
          type: boolean
        isHasSubscription:
          description: "Represents email subscription status, true is subscribed, false is unsubscribed"
          type: boolean
        role:
          $ref: "#/components/schemas/Role"
        registrationDate:
          $ref: "#/components/schemas/Timestamp"
        accountManager:
          $ref: "#/components/schemas/AccountId"
        accountTeamLead:
          $ref: "#/components/schemas/AccountId"
        juniorManager:
          $ref: "#/components/schemas/AccountId"
        salesManager:
          $ref: "#/components/schemas/AccountId"
        salesTeamLead:
          $ref: "#/components/schemas/AccountId"
        adtechAccountManager:
          $ref: "#/components/schemas/AccountId"
        adtechAccountTeamLead:
          $ref: "#/components/schemas/AccountId"
        adtechSalesManager:
          $ref: "#/components/schemas/AccountId"
        adtechSalesTeamLead:
          $ref: "#/components/schemas/AccountId"
    Role:
      type: string
      description: "Variants of Account roles"
      enum:
        - user
        - sales
        - account_manager
        - billing
        - developer
        - account_manager_spde
        - user_view_only
        - flocker
        - admin
        - wc_junior
    Currency:
      type: string
      description: >
        Official currency of the country.
        As value Use 3 letter code in UPPER CASE from <a href="https://en.wikipedia.org/wiki/ISO_4217">ISO 4217</a>
      pattern: ^[A-Z]{3}$
      example: "USD"
    Locale:
      type: string
      description: >
        Locale is a set of parameters that defines the user's language,
        region and any special variant preferences that the user wants to see in their user interface.
        For value use 2 letter code from <a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO 639-1</a>
      pattern: ^[a-z]{2}$
      example: "en"
    Timezone:
      type: string
      description: >
        <a href="https://en.wikipedia.org/wiki/Time_zone">Time zone</a> is an area that observes a uniform standard
        time for legal, commercial and social purposes.
        For this object use value from column "TZ database name"
        from <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">database of time zones</a>
        with type canonical
      example: "America/Los_Angeles"
    CountryCode:
      type: string
      description: >
        Codes for the representation
        of names of countries and their subdivisions. This property uses
        <a href="https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes">ISO 3166-1</a> alpha-2
        codes (two-letter country codes)
      pattern: ^[A-Z]{2}$
      example: "US"
    Email:
      type: string
      description: Email address. Pattern is the regex uses all the characters permitted by RFC 5322
      pattern: ^[a-zA-Z0-9_!#$%&â*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$
      example: "john.galt@flocktory.com"
    Timestamp:
      type: integer
      format: int64
      example: 1650815002
      description: >
        <a href="https://en.wikipedia.org/wiki/Unix_time">Unix time</a> is a system for describing a point in time.
        It is the number of seconds that have elapsed since the Unix epoch.
  requestBodies:
    CountryDataRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CountryData"
      description: CountryData for creation and updation of Country
      required: true
  responses:
    400CountryDataValidationError:
      description: Invalid CountryData supplied
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Some Validation error for CountryData"
              error:
                type: string
                enum:
                  - INVALID_COUNTRY_NAME
                  - INVALID_LOCALE
                  - INVALID_CURRENCY
                  - INVALID_TIMEZONE
    500UnknownException:
      description: Unknown server side exception
      content:
        application/json:
          schema:
            type: object
            properties:
              requestId:
                description: Uniuqe request identifier
                type: string
                example: "6341c870-c23a-11ec-a6d6-0800200c9a66"
              message:
                description: Description of the exception
                type: string
                example: "Internal Server Exception"
